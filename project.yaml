parameters:
  user_prefix: ""

  schema:
    logs: analytics_logs
    staging: analytics_staging
    models: analytics_models
    viz: analytics_viz

  is_test: false

  test_values:
    start_block: -1
    end_block: -1

# Should be overwritten with local node paths during deployment
  blockchain:
    bsc: 'https://bsc-dataseed.binance.org'
    eth: 'https://archive.mainnet.ethereum.nodes-mainnet.theapis.io'

# Used for getting end blocks
  blockchain_jsonrpc:
    bsc: 'https://bsc-dataseed.binance.org'
    eth: 'https://archive.mainnet.ethereum.nodes-mainnet.theapis.io'

  from_prod:

required_credentials:
  - warehouse
  # - postgres_ethereum
  # - bigquery
  # - postgres

default_db: warehouse

presets:
  # Source Table and ddl required
  # extract_postgres:
  #   type: copy
  #   source:
  #     db: postgres_ethereum
  #     schema: public
  #   destination:
  #     schema: "{{ schema['logs'] }}"
  #     table: "{{ user_prefix }}{{ task.name['extract_'|length:] }}"
  #   incremental_key: id
  #   delete_key: id
  #   max_merge_rows: 1000000

  # Source Table and ddl required
  # extract_bigquery:
  #   type: copy
  #   source:
  #     db: bigquery
  #     schema: bigquery-public-data.crypto_ethereum
  #   destination:
  #     schema: "{{ schema['logs'] }}"
  #     table: "{{ user_prefix }}{{ task.name['extract_'|length:] }}"
  #   incremental_key: block_timestamp
  #   delete_key: address
  #   max_merge_rows: 1000000

  # Source Table and ddl required
  extract_snowflake:
    type: copy
    source:
      db: warehouse
      schema: analytics_models
      table: f_ethereum_blocks
    destination:
      db: postgres_ethereum
      schema: public
      table: "{{ user_prefix }}{{ task.name['extract_'|length:] }}"
    incremental_key: timestamp
    delete_key: hash
    max_merge_rows: 1000000

  staging:
    type: autosql
    materialisation: table
    file_name: "{{ task.group }}/{{ task.name }}.sql"
    destination:
      tmp_schema: "{{ schema['staging'] }}"
      schema: "{{ schema['staging'] }}"
      table: "{{ user_prefix }}{{ task.name }}"

  models:
    type: autosql
    materialisation: table
    file_name: "{{ task.group }}/{{ task.name }}.sql"
    destination:
      tmp_schema: "{{ schema['staging'] }}"
      schema: "{{ schema['models'] }}"
      table: "{{ user_prefix }}{{ task.name }}"

  metabase:
    type: autosql
    file_name: "{{ task.group }}/{{ task.name }}.sql"
    materialisation: view
    destination:
      schema: "{{ schema['viz'] }}"
      table: "{{ user_prefix }}{{ task.name[3:] }}"

  create_table:
    type: sql
    file_name: "create_tables/{{ task.name.split('_')[0] }}_{{ task.name.split('_')[-1] }}.sql"
    parameters:
      schema: "{{ schema['logs'] }}"
      table: "{{ user_prefix }}{{ task.name['create_'|length:] }}"

  copy_from_stage:
    type: sql
    file_name: "extract/copy_from_stage.sql"
    parameters:
      stage: "{{ task.name.split('_')[1] }}_stage"
      schema: "{{ schema['logs'] }}"
      currency: "{{ task.name.split('_')[1] }}"
      table: "{{ task.name.split('_')[-1] }}"

  chain_data_load:
    type: python
    class: blockchain_data.LoadData
    parameters:
      blockchain_name: "{{ task.name.split('_')[0] }}"
      blocks_per_file: 10000
      max_workers: 10
      is_archive: false
